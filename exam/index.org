#+TITLE: Lukas exam
* Sortings
** Bubble sort
- can only swap two adjacent values in the array
- goes from front to back and swaps the current two values if out of order (by
  itself $O(n)$)
- has to do this n times, hence a runtime of $O(n^2)$
** Insertion sort
- have a sorted sub-array
- Take next element of the not-sorted sub-array and search for the place in the
  sorted sub array, in which it has to fit in (by itself $O(n)$)
- then shift elements of the array to the right to make space for the new
  element. (by itself also $O(n)$ but since they are done after each other, in
  total until now we are still $O(2n) == O(n)$)
- *insert* the element into the new free space
- Do this n times, hence a runtime of  $O(n^2)$

** Selection sort
- have a sorted sub-array
- go through the unsorted sub-array and *select* the next minimum (or maximum if
  sorting /desc/) (by itself $O(n)$)
- put it as the next element of the sorted sub-array (by swapping it with the
  first element of the non-soted sub array)
- do this n times, hence a runtime of $O(n^2)$
** Merge sort
- recursive algorithm
- if array is just len 0 or len 1, it is already sorted
- if it is longer, divide them in half, and recusively mergesort both halfes
- now *merge* the two sorted arrays to one and we are done (merging is $O(n)$)
- total runtime is $O(n\cdot log(n))$ because the tree hight with n children is
  $log(n)$ and we are creating a tree of the array by splitting it always in
  half)
** Quicksort
- Somehow find a pivot element
- reorder the elements in the array such that all elements lower or equal to the
  pivot are on the left of all elements that are bigger
- recusively call quicksort on both sides
- Worst case runtime is $O(n^2)$, because if we keep being unlucky with the
  pivot elements we are effectively doing Selection sort

* C
** General
- Explain =#include=
- Explain =#define=
- Explain forward declarations
- Explain header files
- Explain =struct=
- Explain =typedef=
- Explain =sizeof=
- Explain =recursion=, using the terms:
  - callstack
  - stack frame
- what is a pointer and show code how you use one to change the value of a
  variable
- what is an array
- what is a string
** Some Functions
*** Sqrt
A way to iteratively estimate square roots is [[https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method][babylonian method of finding
square roots]].

   1. Start with an initial guess $x_0$ (1 works, too) of the square root of a
      number $S$.
   2. Every next estimate $x_{n+1}$ depends on the last one $$x_{n+1} =
      \frac{1}{2}(x_n+\frac{S}{x_n})$$
   3. Repeat step 2 until the desired precision is reached.

   Write a program =sqrt.c= that reads a float from the user and calculates its
   square root to the precision of 6 digits after the decimal point. A run will
   look like this:

#+begin_src sh
./sqrt

Enter any number: 2
The square root of 2.000000 is 1.414214
#+end_src
** Queue and Stack
#+BEGIN_SRC cpp
struct Stack {
    Stack* next_block;
    FILE* data;
}
#+END_SRC

Implement the operations:
 - =void push(Stack* stack, FILE* data)=
 - =FILE* pop(Stack* stack)=

#+BEGIN_SRC cpp
typedef struct Queue {
    Queue_Node* first;
    Queue_Node* last;
} Queue;

typedef struct Queue_Node {
    Queue_Node* next_in_queue;
    float data;
} Queue_Node;
#+END_SRC

Implement the operations:
 - =Queue* create_empty_queue()=
 - =void enqueue(Queue* queue, float data)=
 - =FILE* dequeue(Queue* queue)=

*** Question
Why does it make sense, to have only one structure for the stack and two for the queue?
** What is wrong with this code
#+BEGIN_SRC cpp
bool array_find(int array[], int array_length, int to_search) {
    for (int i = array_length; i >= 0; --i) {
        if (array[i] == to_search)
            return true;
        return false;
    }
}
#+END_SRC
*** Solution :noexport:
1. array index starts at one too late
2. the false return has to be outside the for loop

** What will happen?

#+BEGIN_SRC cpp
#include <stdio.h>

int main() {
    int i = 10;
    while (i --> 0) printf("%s\n", (i % 2 == 0) ? "even" : "odd");
    return 0;
}
#+END_SRC
*** Solution :noexport:
odd
even
odd
even
odd
even
odd
even
odd
even
* Python
** General
- Explain the different usages for the built-in container types:
  - list
  - tuple
  - dictionary
  - set
- Explain the =for= loop
- Explain =range=
- Explain =zip=
- Explain =enumerate=
** Some Functions
*** range
Write the =range= function yourself
*** zip
Write the =zip= function yourself
*** enumerate
Write the =enumerate= function yourself, using =zip= and =range=
*** count words
Write a function =count_words= that takes in a sentence (string) and returns a
dictionary mapping the distinct words to the amount of times they appear in the
sentence.

Also explain what runtime your code has.
*** remove doubles
Write the function =remove_doubles= that takes a list as input and returns a
list, that contains only distinct elements.

Actually write two versions of it:
1) One as short as possible
2) One that is guaranteed to preserve the order of the original elements

** OOP
*** General questions
Explain in two sentences each:
 - what is a class
 - what is an object
 - what is inheritance
 - why is inheritance useful
 - what is an abstract method

*** UML
Implement the following UML diagram using python classes. Write the funcitons in
a way that makes sense for the given context. (Yep, Klausurvorbereitung)

[[./uml.png]]

* Runtime
** What are the Runtimes
- Inserting something at the start of a list
- Inserting something at the middle of a list
- Inserting something at the end of a list (trick question)
- Inserting a new element into a full array
- Acessing something in an array
- Overwriting something in an array
** Linked list of integers 1
#+BEGIN_SRC cpp
bool ll_find(Node* node, int to_search) {
    for (Node* head = node; head != NULL; head = head->next)
        if (head->data == to_search)
            return true;
    return false;
}
#+END_SRC

** Linked list of integers 2
#+BEGIN_SRC cpp
bool ll_find(Node* node, int to_search) {
    if (node == NULL)
        return false;

    if (node->data == to_search)
        return true;

    return ll_find(node->next, to_search);
}
#+END_SRC

** Linked list of strings
#+BEGIN_SRC cpp
bool ll_find(Node* node, char* to_search) {
    if (node == NULL)
        return false;

    if (strcmp(node->data, to_search) == 0)
        return true;

    return ll_find(node->next, to_search);
}
#+END_SRC

** array 1
#+BEGIN_SRC cpp
int sum = 0;
int array[array_length];
// array is being filled
for (int i = 0, i < array_length; ++i) {
    sum += array[i];
}
#+END_SRC

** array 2
#+BEGIN_SRC cpp
int sum = 0;
char array[4][array_length];
// array is being filled
for (int i = 0, i < array_length; ++i) {
    for (int j = 0; j < 4; ++j) {
        fprintf(file, "%c", array[j][i]);
    }
}
#+END_SRC

** Extra
What is the runtime of DFS?
* Data structures
** General
*** write as much as you know: what is same, what is different?
- compare python lists  and and c arrays,
- compare python lists  and and c linked lists
- compare python tuples and and c arrays
- compare python dictionaries and and c hash tables
** Lists
#+BEGIN_SRC cpp
typedef struct List {
    int data;
    List* rest; // pointer to the rest of the list
}
#+END_SRC

*** write the functions:
1. =int size(List* l)=
2. =print_front_to_back(List* l)=
3. =print_back_to_front(List* l)=
4. =int sum_of_all_elements(List* l)=

*** complete the function:
1. =int average_of_all_elements(List* l)=

#+BEGIN_SRC cpp
int average_of_all_elements_inner(List* l, int sum, int count) {
    if (l == NULL) {
        ______;
    }
    return average_of_all_elements_inner(l->next, ______,  ______);
}

int average_of_all_elements(List* l) {
    return average_of_all_elements_inner(l, ______, ______);
}
#+END_SRC
* Bonus
** 1
1. What does this code do?
2. What runtimme has it?
3. Write code that does the same but has a better runtime?

#+BEGIN_SRC python
l = generate_some_list()
d = {}

for e in l:
    d[e] = l.count(e)
#+END_SRC
